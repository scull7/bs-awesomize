// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var Js_null_undefined = require("bs-platform/lib/js/js_null_undefined.js");

var falsePromise = Promise.resolve(false);

function reply(msg, res) {
  return res.then(function (isOk) {
              return Promise.resolve(isOk ? undefined : Caml_option.some(msg));
            });
}

function classified(fn, maybe, sanitized) {
  return Promise.resolve(maybe !== undefined ? Curry._2(fn, Js_json.classify(Caml_option.valFromOption(maybe)), sanitized) : undefined);
}

function numberTest(fn, maybe, sanitized) {
  var fn2 = function (classified, param) {
    if (typeof classified === "number" || classified.TAG !== /* JSONNumber */1) {
      return "not_number";
    } else {
      return Curry._1(fn, classified._0);
    }
  };
  return classified(fn2, maybe, sanitized);
}

function stringTest(fn, maybe, sanitized) {
  var fn2 = function (classified, param) {
    if (typeof classified === "number" || classified.TAG) {
      return "not_string";
    } else {
      return Curry._1(fn, classified._0);
    }
  };
  return classified(fn2, maybe, sanitized);
}

function required(maybe, param) {
  return Promise.resolve(maybe !== undefined ? undefined : "required");
}

function requireArray(maybe, param) {
  var tmp;
  if (maybe !== undefined) {
    var match = Js_json.classify(Caml_option.valFromOption(maybe));
    tmp = typeof match === "number" || match.TAG !== /* JSONArray */3 ? "require_array" : undefined;
  } else {
    tmp = "required";
  }
  return Promise.resolve(tmp);
}

function notEqualNumber(x) {
  return function (param, param$1) {
    return numberTest((function (str) {
                  if (str === x) {
                    return "cannot_be_equal";
                  }
                  
                }), param, param$1);
  };
}

function notEqualString(x) {
  return function (param, param$1) {
    return stringTest((function (str) {
                  if (str === x) {
                    return "cannot_be_equal";
                  }
                  
                }), param, param$1);
  };
}

function isString(param, param$1) {
  return classified((function (classified, param) {
                if (typeof classified === "number" || classified.TAG) {
                  return "not_string";
                }
                
              }), param, param$1);
}

function isInt(param, param$1) {
  return numberTest((function (n) {
                if (Math.ceil(n) === n) {
                  return ;
                } else {
                  return "not_int";
                }
              }), param, param$1);
}

function isBigInt(param, param$1) {
  return stringTest((function (str) {
                var partial_arg = /^\-\d+$|^0+$/;
                var isZero = function (param) {
                  return partial_arg.test(param);
                };
                var partial_arg$1 = /^\d{1,20}$/;
                var isBigIntLike = function (param) {
                  return partial_arg$1.test(param);
                };
                if (str.length > 20) {
                  return "maximum";
                } else if (Curry._1(isZero, str)) {
                  return "minimum";
                } else if (Curry._1(isBigIntLike, str)) {
                  return ;
                } else {
                  return "not_big_int";
                }
              }), param, param$1);
}

function isEqualNumber(x) {
  return function (param, param$1) {
    return numberTest((function (n) {
                  if (n === x) {
                    return ;
                  } else {
                    return "not_equal";
                  }
                }), param, param$1);
  };
}

function isEqualString(x) {
  return function (param, param$1) {
    return stringTest((function (str) {
                  if (str === x) {
                    return ;
                  } else {
                    return "not_equal";
                  }
                }), param, param$1);
  };
}

function minStringLength(length) {
  return function (param, param$1) {
    return stringTest((function (str) {
                  if (str.length >= length) {
                    return ;
                  } else {
                    return "min_length";
                  }
                }), param, param$1);
  };
}

function maxStringLength(length) {
  return function (param, param$1) {
    return stringTest((function (str) {
                  if (str.length <= length) {
                    return ;
                  } else {
                    return "max_length";
                  }
                }), param, param$1);
  };
}

function maxNumber(max) {
  return function (param, param$1) {
    return numberTest((function (n) {
                  if (n <= max) {
                    return ;
                  } else {
                    return "maximum";
                  }
                }), param, param$1);
  };
}

function minNumber(min) {
  return function (param, param$1) {
    return numberTest((function (n) {
                  if (n >= min) {
                    return ;
                  } else {
                    return "minimum";
                  }
                }), param, param$1);
  };
}

function matchRegex(re) {
  return function (param, param$1) {
    return stringTest((function (str) {
                  if (re.test(str)) {
                    return ;
                  } else {
                    return "not_match";
                  }
                }), param, param$1);
  };
}

var isUSEIN = matchRegex(/^(0[1-6]|1[0-6]|2[0-7]|[345]\d|[68][0-8]|7[1-7]|9[0-58-9])-?\d{7}$/);

function externRaw(fn, msg, maybe, sanitized) {
  return reply(msg, Promise.resolve(Curry._2(fn, maybe, sanitized)));
}

function extern(fn, msg, maybe, sanitized) {
  if (maybe !== undefined) {
    return reply(msg, Curry._2(fn, Js_json.classify(Caml_option.valFromOption(maybe)), sanitized));
  } else {
    return Promise.resolve(undefined);
  }
}

function externCompiler(fn, msg, maybe, sanitized) {
  return extern((function (classified, param) {
                return Curry._1(fn, classified);
              }), msg, maybe, sanitized);
}

function externString(fn, msg, maybe, sanitized) {
  var handler = function (param) {
    var fn$1 = function (str) {
      return Curry._2(fn, str, sanitized);
    };
    var tmp;
    tmp = typeof param === "number" || param.TAG ? false : Curry._1(fn$1, param._0);
    return Promise.resolve(tmp);
  };
  return externCompiler(handler, msg, maybe, sanitized);
}

function externNumber(fn, msg, maybe, sanitized) {
  var handler = function (n) {
    if (typeof n === "number" || n.TAG !== /* JSONNumber */1) {
      return falsePromise;
    } else {
      return Promise.resolve(Curry._2(fn, n._0, sanitized));
    }
  };
  return externCompiler(handler, msg, maybe, sanitized);
}

function externArray(fn, msg, maybe, sanitized) {
  var handler = function (arr) {
    if (typeof arr === "number" || arr.TAG !== /* JSONArray */3) {
      return falsePromise;
    } else {
      return Promise.resolve(Curry._2(fn, arr._0, sanitized));
    }
  };
  return externCompiler(handler, msg, maybe, sanitized);
}

function externDependentFactory(decoder, fn, key, msg, maybe, sanitized) {
  var handler = function (v) {
    var __x = Belt_MapString.get(sanitized, key);
    return Curry._3(fn, v, Belt_Option.flatMap(__x, (function (__x) {
                      return Belt_Option.flatMap(__x, decoder);
                    })), sanitized);
  };
  return reply(msg, Belt_Option.mapWithDefault(Belt_Option.flatMap(maybe, decoder), falsePromise, handler));
}

function externDependentRaw(fn, key, msg, maybe, sanitized) {
  if (maybe === undefined) {
    return Promise.resolve(undefined);
  }
  var __x = Belt_MapString.get(sanitized, key);
  return reply(msg, Curry._3(fn, Caml_option.valFromOption(maybe), Belt_Option.flatMap(__x, (function (x) {
                        return x;
                      })), sanitized));
}

function externDependentNumber(fn, key, msg) {
  return function (param, param$1) {
    return externDependentFactory(Js_json.decodeNumber, fn, key, msg, param, param$1);
  };
}

function externDependentString(fn, key, msg) {
  return function (param, param$1) {
    return externDependentFactory(Js_json.decodeString, fn, key, msg, param, param$1);
  };
}

function recursive(validator) {
  var awesomizer = function (jsonList) {
    if (!jsonList) {
      return Promise.resolve(true);
    }
    var xs = jsonList.tl;
    var dict = Js_json.classify(jsonList.hd);
    if (typeof dict === "number" || dict.TAG !== /* JSONObject */2) {
      return falsePromise;
    } else {
      return Curry._1(validator, dict._0).then(function (result) {
                  if (result.NAME === "Error") {
                    return falsePromise;
                  } else {
                    return awesomizer(xs);
                  }
                });
    }
  };
  return function (param, param$1) {
    return extern((function (taggedJson, param) {
                  if (typeof taggedJson === "number" || taggedJson.TAG !== /* JSONArray */3) {
                    return falsePromise;
                  } else {
                    return awesomizer(Belt_List.fromArray(taggedJson._0));
                  }
                }), "invalid_scope", param, param$1);
  };
}

function nullOrValue(v) {
  if (v !== undefined) {
    return Caml_option.valFromOption(v);
  } else {
    return null;
  }
}

function extern$1(fn, msg) {
  return function (maybe, sanitized) {
    var jsonSanitized = Js_dict.fromArray(Belt_MapString.toArray(Belt_MapString.map(sanitized, nullOrValue)));
    var __x = Belt_Option.map(maybe, (function (json) {
            return Curry._3(fn, json, jsonSanitized, sanitized);
          }));
    return reply(msg, Belt_Option.getWithDefault(__x, Promise.resolve(true)));
  };
}

function externDependent(fn, key, msg) {
  var executor = function (json, jsonSanitized, sanitized) {
    var maybe = Belt_MapString.get(sanitized, key);
    return Curry._3(fn, json, Belt_Option.mapWithDefault(maybe, null, Js_null_undefined.fromOption), jsonSanitized);
  };
  return extern$1(executor, msg);
}

var $$Promise$1 = {
  extern: extern$1,
  externDependent: externDependent
};

function extern$2(fn, msg) {
  return extern$1((function (a, b, c) {
                return Promise.resolve(Curry._3(fn, a, b, c));
              }), msg);
}

function externDependent$1(fn, key, msg) {
  return externDependent((function (a, b, c) {
                return Promise.resolve(Curry._3(fn, a, b, c));
              }), key, msg);
}

var JavaScript = {
  $$Promise: $$Promise$1,
  extern: extern$2,
  externDependent: externDependent$1
};

exports.externArray = externArray;
exports.externDependentNumber = externDependentNumber;
exports.externDependentRaw = externDependentRaw;
exports.externDependentString = externDependentString;
exports.isBigInt = isBigInt;
exports.externNumber = externNumber;
exports.externRaw = externRaw;
exports.externString = externString;
exports.isEqualNumber = isEqualNumber;
exports.isEqualString = isEqualString;
exports.isInt = isInt;
exports.isString = isString;
exports.isUSEIN = isUSEIN;
exports.matchRegex = matchRegex;
exports.minStringLength = minStringLength;
exports.maxStringLength = maxStringLength;
exports.maxNumber = maxNumber;
exports.minNumber = minNumber;
exports.notEqualNumber = notEqualNumber;
exports.notEqualString = notEqualString;
exports.recursive = recursive;
exports.required = required;
exports.requireArray = requireArray;
exports.JavaScript = JavaScript;
/* falsePromise Not a pure module */
