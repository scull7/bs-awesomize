// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");

function map(fn, result) {
  return result.then(function (param) {
              if (param.NAME === "Error") {
                return Promise.resolve({
                            NAME: "Error",
                            VAL: param.VAL
                          });
              } else {
                return Promise.resolve({
                            NAME: "Ok",
                            VAL: Curry._1(fn, param.VAL)
                          });
              }
            });
}

function bimap(left, right, result) {
  return result.then(function (param) {
              if (param.NAME === "Error") {
                return Promise.resolve({
                            NAME: "Error",
                            VAL: Curry._1(left, param.VAL)
                          });
              } else {
                return Promise.resolve({
                            NAME: "Ok",
                            VAL: Curry._1(right, param.VAL)
                          });
              }
            });
}

function fold(left, right, result) {
  return result.then(function (param) {
              if (param.NAME === "Error") {
                return Promise.resolve(Curry._1(left, param.VAL));
              } else {
                return Promise.resolve(Curry._1(right, param.VAL));
              }
            });
}

function getMessage(key, err) {
  var match = Belt_MapString.get(err, key);
  if (match === undefined) {
    return ;
  }
  var message = Caml_option.valFromOption(match);
  if (message !== undefined) {
    return Caml_option.some(Caml_option.valFromOption(message));
  }
  
}

function listToJson(errorList) {
  return Js_dict.fromArray(Belt_MapString.toArray(Belt_MapString.map(errorList, (function (msg) {
                        if (msg !== undefined) {
                          return msg;
                        } else {
                          return null;
                        }
                      }))));
}

var $$Error = {
  getMessage: getMessage,
  listToJson: listToJson
};

function toJs(result) {
  return fold((function (err) {
                return {
                        awesomeResultType: "Error",
                        data: null,
                        messages: listToJson(err)
                      };
              }), (function (result) {
                return {
                        awesomeResultType: "Ok",
                        data: Js_dict.fromArray(Belt_MapString.toArray(result)),
                        messages: null
                      };
              }), result);
}

exports.map = map;
exports.bimap = bimap;
exports.fold = fold;
exports.$$Error = $$Error;
exports.toJs = toJs;
/* No side effect */
